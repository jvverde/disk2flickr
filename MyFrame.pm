# generated by wxGlade 0.6.8 (standalone edition) on Tue Oct 29 09:46:14 2013
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use MyFlickr;
use Digest::SHA qw(sha256);
use File::HomeDir;
use Storable;
use File::Copy qw(cp);
use Cwd qw{abs_path};

######################my code ######################################

$\ = "\n";

my $flickr = MyFlickr->new();
my $pattern = qr/./;
my $stop = 0;
my @tags = ();
my $home = File::HomeDir->my_home;

my $dbfile = qq|$home/.disk2flick|;
store {}, $dbfile unless -r $dbfile;
my $db = retrieve($dbfile) || {};
cp $dbfile, qq|$dbfile.old|;
$db->{cnt}++;

my $syncDB = sub{
	store $db, $dbfile;
};
my $removeUser = sub{
	delete $db->{user};
	$syncDB->();
};
$syncDB->();

sub __upload{
	my ($file,@tags) = @_;
	print "1-Upload file $file";
	my $mtime =  (stat($file))[9];
	return if defined $db->{filename} and $db->{filename} eq $mtime;
	print "2-Upload file $file";
	my $id = __getFileID($file);
	return if defined $db->{ids}->{$id};
	print "3-Upload file $file";
	if ($flickr->checkFlickrPhoto($id) == 0){ #if not yet on flickr, upload
		my @localtags = (
			qq|dir:path="$file"|,
			qq|meta:id="$id"|,
			q|time:modification="|.localtime($mtime).q|"|,
			map {qq|dir:step="$_"|} grep {/[^\s]/} split /\//, $file
		);
		pop @localtags; #discard filename from dir:step tags

		my $photoid = $flickr->upload($file,@tags, @localtags)
			or warn "Failed to upload $file" and return;
		print "File $file uploaded to flickr (photoid = $photoid)";
		$db->{ids}->{$id} = $photoid;
	}else{
		print "File $file ($id) is already on flickr";
		$db->{ids}->{$id} = 0;
	}
	$db->{filename} = $mtime;
	store $db, $dbfile;
}

sub __getFileID{
	warn(q|getFileID: File not defined|) and return undef unless defined $_[0];
	warn(q|getFileID: File not $_[0] found|) and return undef unless -e $_[0];
	my $sha = Digest::SHA->new();
	$sha->addfile($_[0],'b');
	return $sha->hexdigest;
}

sub getFolder{
	my $dir = shift;
	exit if $stop;
	print qq|Get dir $dir|;
	if ($dir =~ $pattern){
		print qq|backup dir $dir|;
		__backup($dir,@tags);
	}
	__getSubFolders($dir);
}

my $getFolder = \&getFolder;

sub __getSubFolders{
	my $dir = shift;
	opendir DIR, $dir or warn qq|Nao foi possivel abrir o directorio $dir| and return;
	my @subdirs = grep {-d qq|$dir/$_| and $_ ne '.' and $_ ne '..'} readdir DIR;
	closedir DIR;
	foreach my $subdir (@subdirs){
		getFolder(qq|$dir/$subdir|);
	}
}

sub __backup{
	my ($dir,@tags) = @_;

	opendir DIR, $dir or warn qq|'nao foi possivel abrir o directorio corrente'|;

	my @files = grep {/\.(jpg|nef)$/i} readdir DIR;
	foreach (@files){
		my $path = abs_path(qq|$dir/$_|);
		print "file=$path";
		eval{
			__upload($path,@tags);
		};
		warn $@ if $@;
		exit if $stop;
	}
}

######################End of my code ######################################


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;
use Data::Dumper;
use Carp;


sub __showMainPanel{
	my ($self) = @_;
	$self->{mainPanel}->Show(1);
	$self->__hideLoginPanel();
	$self->{mainPanel}->GetParent()->GetSizer()->Layout();
}
sub __hideMainPanel{
	my ($self) = @_;
	$self->{mainPanel}->Show(0);
}

sub __showLoginPanel{
    my ($self) = @_;
	$self-> __hideMainPanel();
	$self->{getTokenPanel}->Show(0);
	$self->{loginPanel}->Show(1);
	$self->{loginPanel}->GetParent()->GetSizer()->Layout();
	$self->__showAskAuthPanel();
}
sub __hideLoginPanel{
	my ($self) = @_;
	$self->{loginPanel}->Show(0);
}

sub __showCheckTokenPanel{
	my ($self) = @_;
	$self->__hideAskAuthPanel();
	$self->{getTokenPanel}->Show(1);
	$self->{getTokenPanel}->GetParent()->GetSizer()->Layout();
}
sub __hideCheckTokenPanel{
	my ($self) = @_;
	$self->{getTokenPanel}->Show(0);
}
sub  __showAskAuthPanel{
	my ($self) = @_;
	$self->__hideCheckTokenPanel();
	$self->{askAuthPanel}->Show(1);
	$self->{askAuthPanel}->GetParent()->GetSizer()->Layout();
}
sub  __hideAskAuthPanel{
	my ($self) = @_;
	$self->{askAuthPanel}->Show(0);
}

sub __setStatus{
	my ($self) = @_;
	$self->SetStatusText('User ' .  ($db->{user}->{fullname} || $db->{user}->{username}),0);
}


sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

# begin wxGlade: MyFrame::new

	$style = wxDEFAULT_FRAME_STYLE
		unless defined $style;

	$self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
	$self->{loginPanel} = Wx::ScrolledWindow->new($self, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
	$self->{getTokenPanel} = Wx::Panel->new($self->{loginPanel}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{getTokenInfoSubPanel} = Wx::Panel->new($self->{getTokenPanel}, -1, wxDefaultPosition, wxDefaultSize, wxDOUBLE_BORDER|wxTAB_TRAVERSAL);
	$self->{askAuthPanel} = Wx::Panel->new($self->{loginPanel}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{askAuthInfoSubPanel} = Wx::Panel->new($self->{askAuthPanel}, -1, wxDefaultPosition, wxDefaultSize, wxDOUBLE_BORDER|wxTAB_TRAVERSAL);
	$self->{mainPanel} = Wx::ScrolledWindow->new($self, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
	$self->{backupNotebook} = Wx::Notebook->new($self->{mainPanel}, -1, wxDefaultPosition, wxDefaultSize, 0);
	$self->{backupPanel} = Wx::Panel->new($self->{backupNotebook}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{backupSubPanel} = Wx::Panel->new($self->{backupPanel}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{backupRecursiveOptionsPanel} = Wx::Panel->new($self->{backupSubPanel}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{backupRecursiveOptionsSizer_staticbox} = Wx::StaticBox->new($self->{backupRecursiveOptionsPanel}, -1, "Include subfolders" );
	$self->{backupSubSizer_staticbox} = Wx::StaticBox->new($self->{backupSubPanel}, -1, "Select folders to backup" );
	$self->{askAuthInfoSubHSizer_staticbox} = Wx::StaticBox->new($self->{askAuthInfoSubPanel}, -1, "Step 1: Get Authorization" );
	$self->{getTokenInfoSubHSizer_staticbox} = Wx::StaticBox->new($self->{getTokenInfoSubPanel}, -1, "Step 2: Check" );
	$self->{foldersListPanel} = Wx::ScrolledWindow->new($self->{backupSubPanel}, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);


	# Menu Bar

	$self->{mainMenu} = Wx::MenuBar->new();
	my $wxglade_tmp_menu;
	$self->{File} = Wx::Menu->new();
	$self->{Login} = $self->{File}->Append(Wx::NewId(), "Login", "");
	$self->{Logout} = $self->{File}->Append(Wx::NewId(), "Logout", "");
	$self->{File}->AppendSeparator();
	$self->{Exit} = $self->{File}->Append(Wx::NewId(), "Exit", "");
	$self->{mainMenu}->Append($self->{File}, "File");
	$self->SetMenuBar($self->{mainMenu});

# Menu Bar end

	$self->{mainStatusBar} = $self->CreateStatusBar(2, 0);
	$self->{foldersList} = Wx::ListCtrl->new($self->{foldersListPanel}, -1, wxDefaultPosition, wxDefaultSize, wxLC_LIST|wxSUNKEN_BORDER);
	$self->{browseDirNameButton} = Wx::Button->new($self->{backupSubPanel}, -1, "Add a new folder");
	$self->{RemoveButton} = Wx::Button->new($self->{backupSubPanel}, -1, "Remove selected folders");
	$self->{clearAllButton} = Wx::Button->new($self->{backupSubPanel}, -1, "Clear all");
	$self->{backupRecursiveOptionAll} = Wx::RadioButton->new($self->{backupRecursiveOptionsPanel}, -1, "All", wxDefaultPosition, wxDefaultSize, wxRB_GROUP|wxRB_USE_CHECKBOX);
	$self->{backupRecursiveOptionSome} = Wx::RadioButton->new($self->{backupRecursiveOptionsPanel}, -1, "Only if folder name ", wxDefaultPosition, wxDefaultSize, wxRB_USE_CHECKBOX);
	$self->{backupRecursiveOptionSomeChoiceName} = Wx::ComboBox->new($self->{backupRecursiveOptionsPanel}, -1, "", wxDefaultPosition, wxDefaultSize, ["is equal to", "constains", "start with", "end with"], wxCB_DROPDOWN|wxCB_DROPDOWN);
	$self->{backupRecursiveOptionSomeChoiceValue} = Wx::TextCtrl->new($self->{backupRecursiveOptionsPanel}, -1, "", wxDefaultPosition, wxDefaultSize, );
	$self->{backupRecursiveOptionNone} = Wx::RadioButton->new($self->{backupRecursiveOptionsPanel}, -1, "None (only files)", wxDefaultPosition, wxDefaultSize, wxRB_USE_CHECKBOX);
	$self->{start_button} = Wx::Button->new($self->{backupPanel}, -1, "Start");
	$self->{Close_button} = Wx::Button->new($self->{backupPanel}, -1, "Close");
	$self->{notebook_4_pane_2} = Wx::Panel->new($self->{backupNotebook}, -1, wxDefaultPosition, wxDefaultSize, );
	$self->{askAuthInfoLabel} = Wx::StaticText->new($self->{askAuthInfoSubPanel}, -1, "Go to your browser and give me permissions to acess to your acount", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
	$self->{cancelAuthButton} = Wx::Button->new($self->{askAuthPanel}, -1, "Cancel");
	$self->{nextAuthButton} = Wx::Button->new($self->{askAuthPanel}, -1, "Get Auth...");
	$self->{getTokenInfoLabel} = Wx::StaticText->new($self->{getTokenInfoSubPanel}, -1, "Check the autorization. \n(Don't if you haven't give autorization in the browser)", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
	$self->{cancelTokenButton} = Wx::Button->new($self->{getTokenPanel}, -1, "Cancel");
	$self->{nextTokenButton} = Wx::Button->new($self->{getTokenPanel}, -1, "Check...");

	$self->__set_properties();
	$self->__do_layout();

	Wx::Event::EVT_MENU($self, $self->{Login}->GetId, \&do_login);
	Wx::Event::EVT_MENU($self, $self->{Logout}->GetId, \&do_logout);
	Wx::Event::EVT_MENU($self, $self->{Exit}->GetId, \&do_exit);
	Wx::Event::EVT_LIST_BEGIN_DRAG($self, $self->{foldersList}->GetId, \&on_begin);
	Wx::Event::EVT_LIST_DELETE_ITEM($self, $self->{foldersList}->GetId, \&on_delete);
	Wx::Event::EVT_LIST_ITEM_SELECTED($self, $self->{foldersList}->GetId, \&on_selected);
	Wx::Event::EVT_BUTTON($self, $self->{browseDirNameButton}->GetId, \&do_browse);
	Wx::Event::EVT_BUTTON($self, $self->{RemoveButton}->GetId, \&do_remove_selected);
	Wx::Event::EVT_BUTTON($self, $self->{clearAllButton}->GetId, \&do_remove_all);
	Wx::Event::EVT_BUTTON($self, $self->{start_button}->GetId, \&do_backup);
	Wx::Event::EVT_BUTTON($self, $self->{Close_button}->GetId, \&do_close);
	Wx::Event::EVT_BUTTON($self, $self->{cancelAuthButton}->GetId, \&go_main);
	Wx::Event::EVT_BUTTON($self, $self->{nextAuthButton}->GetId, \&go_askAuth);
	Wx::Event::EVT_BUTTON($self, $self->{cancelTokenButton}->GetId, \&go_main);
	Wx::Event::EVT_BUTTON($self, $self->{nextTokenButton}->GetId, \&go_getToken);

# end wxGlade
	if(defined $db->{user} and $db->{user}->{auth_token}){
		$self->__showMainPanel();
		$self->__setStatus();
		$flickr->{user} = $db->{user};
	}else{
		$self->__showLoginPanel();
		$self->SetStatusText('The user is not yet authorized',0);
	}

    return $self;

}


sub __set_properties {
    my $self = shift;
# begin wxGlade: MyFrame::__set_properties

	$self->SetTitle("Disk2Flickr");
	$self->SetSize(Wx::Size->new(550, 340));
	$self->{mainStatusBar}->SetStatusWidths(-1,0);

	my( @mainStatusBar_fields ) = (
		"User Status",
		""
	);

	if( @mainStatusBar_fields ) {
		$self->{mainStatusBar}->SetStatusText($mainStatusBar_fields[$_], $_)
		for 0 .. $#mainStatusBar_fields ;
	}
	$self->{foldersListPanel}->SetScrollRate(10, 10);
	$self->{backupRecursiveOptionSomeChoiceName}->SetSelection(-1);
	$self->{mainPanel}->SetScrollRate(10, 10);
	$self->{loginPanel}->Show(0);
	$self->{loginPanel}->SetScrollRate(10, 10);

# end wxGlade
}

sub __do_layout {
    my $self = shift;
# begin wxGlade: MyFrame::__do_layout

	$self->{mainSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{loginPanelSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{getTokenSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{getTokenControlSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{getTokenInfoSubHSizer}= Wx::StaticBoxSizer->new($self->{getTokenInfoSubHSizer_staticbox}, wxVERTICAL);
	$self->{getTokenInfoSubVSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{askAuthSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{askAuthControlSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{askAuthInfoSubHSizer}= Wx::StaticBoxSizer->new($self->{askAuthInfoSubHSizer_staticbox}, wxVERTICAL);
	$self->{askAuthInfoSubVSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{mainPainelSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{backupSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{mainControlHSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{mainControlVSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{backupSubSizer}= Wx::StaticBoxSizer->new($self->{backupSubSizer_staticbox}, wxVERTICAL);
	$self->{backupRecursiveOptionsSizer}= Wx::StaticBoxSizer->new($self->{backupRecursiveOptionsSizer_staticbox}, wxVERTICAL);
	$self->{backupRecursiveOptionSomeSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{foldersControlSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
	$self->{foldersListSizer} = Wx::BoxSizer->new(wxVERTICAL);
	$self->{foldersListSizer}->Add($self->{foldersList}, 1, wxEXPAND, 0);
	$self->{foldersListPanel}->SetSizer($self->{foldersListSizer});
	$self->{backupSubSizer}->Add($self->{foldersListPanel}, 1, wxEXPAND, 0);
	$self->{foldersControlSizer}->Add($self->{browseDirNameButton}, 0, 0, 0);
	$self->{foldersControlSizer}->Add($self->{RemoveButton}, 0, 0, 0);
	$self->{foldersControlSizer}->Add($self->{clearAllButton}, 0, 0, 0);
	$self->{backupSubSizer}->Add($self->{foldersControlSizer}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{backupRecursiveOptionsSizer}->Add($self->{backupRecursiveOptionAll}, 0, 0, 0);
	$self->{backupRecursiveOptionSomeSizer}->Add($self->{backupRecursiveOptionSome}, 0, wxALIGN_CENTER_VERTICAL, 0);
	$self->{backupRecursiveOptionSomeSizer}->Add($self->{backupRecursiveOptionSomeChoiceName}, 0, 0, 0);
	$self->{backupRecursiveOptionSomeSizer}->Add($self->{backupRecursiveOptionSomeChoiceValue}, 0, 0, 0);
	$self->{backupRecursiveOptionsSizer}->Add($self->{backupRecursiveOptionSomeSizer}, 1, wxEXPAND, 0);
	$self->{backupRecursiveOptionsSizer}->Add($self->{backupRecursiveOptionNone}, 0, 0, 0);
	$self->{backupRecursiveOptionsPanel}->SetSizer($self->{backupRecursiveOptionsSizer});
	$self->{backupSubSizer}->Add($self->{backupRecursiveOptionsPanel}, 0, wxTOP|wxEXPAND, 2);
	$self->{backupSubPanel}->SetSizer($self->{backupSubSizer});
	$self->{backupSizer}->Add($self->{backupSubPanel}, 1, wxEXPAND, 0);
	$self->{mainControlVSizer}->Add($self->{start_button}, 0, 0, 0);
	$self->{mainControlVSizer}->Add(20, 1, 0, 0, 0);
	$self->{mainControlVSizer}->Add($self->{Close_button}, 0, 0, 0);
	$self->{mainControlHSizer}->Add($self->{mainControlVSizer}, 0, wxTOP|wxALIGN_CENTER_HORIZONTAL, 10);
	$self->{backupSizer}->Add($self->{mainControlHSizer}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{backupPanel}->SetSizer($self->{backupSizer});
	$self->{backupNotebook}->AddPage($self->{backupPanel}, "Backup");
	$self->{backupNotebook}->AddPage($self->{notebook_4_pane_2}, "Help");
	$self->{mainPainelSizer}->Add($self->{backupNotebook}, 1, wxEXPAND, 0);
	$self->{mainPanel}->SetSizer($self->{mainPainelSizer});
	$self->{mainSizer}->Add($self->{mainPanel}, 1, wxEXPAND, 0);
	$self->{askAuthInfoSubVSizer}->Add($self->{askAuthInfoLabel}, 0, wxALL|wxALIGN_CENTER_VERTICAL, 2);
	$self->{askAuthInfoSubHSizer}->Add($self->{askAuthInfoSubVSizer}, 1, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{askAuthInfoSubPanel}->SetSizer($self->{askAuthInfoSubHSizer});
	$self->{askAuthSizer}->Add($self->{askAuthInfoSubPanel}, 5, wxEXPAND, 0);
	$self->{askAuthControlSizer}->Add($self->{cancelAuthButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{askAuthControlSizer}->Add(20, 1, 0, 0, 0);
	$self->{askAuthControlSizer}->Add($self->{nextAuthButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{askAuthSizer}->Add($self->{askAuthControlSizer}, 1, wxTOP|wxALIGN_CENTER_HORIZONTAL, 5);
	$self->{askAuthPanel}->SetSizer($self->{askAuthSizer});
	$self->{loginPanelSizer}->Add($self->{askAuthPanel}, 1, wxEXPAND, 0);
	$self->{getTokenInfoSubVSizer}->Add($self->{getTokenInfoLabel}, 0, wxALL|wxALIGN_CENTER_VERTICAL, 2);
	$self->{getTokenInfoSubHSizer}->Add($self->{getTokenInfoSubVSizer}, 1, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{getTokenInfoSubPanel}->SetSizer($self->{getTokenInfoSubHSizer});
	$self->{getTokenSizer}->Add($self->{getTokenInfoSubPanel}, 5, wxEXPAND, 0);
	$self->{getTokenControlSizer}->Add($self->{cancelTokenButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{getTokenControlSizer}->Add(20, 1, 0, 0, 0);
	$self->{getTokenControlSizer}->Add($self->{nextTokenButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
	$self->{getTokenSizer}->Add($self->{getTokenControlSizer}, 1, wxTOP|wxALIGN_CENTER_HORIZONTAL, 5);
	$self->{getTokenPanel}->SetSizer($self->{getTokenSizer});
	$self->{loginPanelSizer}->Add($self->{getTokenPanel}, 1, wxEXPAND, 0);
	$self->{loginPanel}->SetSizer($self->{loginPanelSizer});
	$self->{mainSizer}->Add($self->{loginPanel}, 2, wxEXPAND, 0);
	$self->SetSizer($self->{mainSizer});
	$self->Layout();

# end wxGlade
}

sub do_logout {
    my ($self, $event) = @_;
	$removeUser->();
	$self->__showLoginPanel();
	$self->SetStatusText('The user is not authorized anymore',0);
    # wxGlade: MyFrame::do_logout <event_handler>
    warn "Event handler (do_logout) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_exit {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::do_exit <event_handler>
    warn "Event handler (do_exit) not implemented";
    $event->Skip;
    # end wxGlade
}


our $lastDirectory = "";
sub do_browse {
    my ($self, $event) = @_;
	$\ = "\n";
	#my $dgl = Wx::DirDialog->new($self->{backupSubPanel}, "Chosse a folder to upload", $defaultPath, $style, -1, -1, "");
	my $dlg = Wx::DirDialog->new($self->{backupSubPanel}, "Please, choose a folder to upload",$lastDirectory);
	if ($dlg->ShowModal == wxID_OK){
		$lastDirectory = $dlg->GetPath();
		print $lastDirectory;
		my $p = $self->{foldersList}->GetItemCount;
		print "p=$p";
		$self->{foldersList}->InsertStringItem($p,$lastDirectory)
	}
	$event->Skip;
	return;
	# wxGlade: MyFrame::do_browse <event_handler>
    warn "Event handler (do_browse) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_addDir {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::on_addDir <event_handler>
    warn "Event handler (on_addDir) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_begin {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::on_begin <event_handler>
    warn "Event handler (on_begin) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_delete {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::on_delete <event_handler>
    warn "Event handler (on_delete) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_selected {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::on_selected <event_handler>
    warn "Event handler (on_selected) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_backup {
    my ($self, $event) = @_;
	my $count = $self->{foldersList}->GetItemCount;
	my $i = 0;
	while($i < $count){
		print $self->{foldersList}->GetItemText($i);
		$getFolder->($self->{foldersList}->GetItemText($i++));
	}
    # wxGlade: MyFrame::do_backup <event_handler>
    warn "Event handler (do_backup) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_close {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::do_close <event_handler>
    warn "Event handler (do_close) not implemented";
    $event->Skip;
    # end wxGlade
}


sub go_main {
    my ($self, $event) = @_;
	return $self->__showMainPanel();
    # wxGlade: MyFrame::go_main <event_handler>
    warn "Event handler (go_main) not implemented";
    $event->Skip;
    # end wxGlade
}

sub go_askAuth {
    my ($self, $event) = @_;
	$flickr->askAuth() or carp q|ask auth error| and return undef;
	$self->__showCheckTokenPanel();
    $event->Skip;
	return;
    # wxGlade: MyFrame::go_askAuth <event_handler>
    warn "Event handler (go_askAuth) not implemented";
    $event->Skip;
    # end wxGlade
}


sub go_getToken {
    my ($self, $event) = @_;
	print 'Get token...';
	$flickr->getToken() or return $self-> __showAskAuthPanel();
	$self->__showMainPanel();
	$db->{user}= $flickr->{user};
	$self->__setStatus();
	$syncDB->();
	#print Dumper $self->{flickr};
	return;
    # wxGlade: MyFrame::go_getToken <event_handler>
    warn "Event handler (go_getToken) not implemented";
    $event->Skip;
    # end wxGlade
}

sub do_remove_selected {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::do_remove_selected <event_handler>
    warn "Event handler (do_remove_selected) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_remove_all {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::do_remove_all <event_handler>
    warn "Event handler (do_remove_all) not implemented";
    $event->Skip;
    # end wxGlade
}

sub do_login {
    my ($self, $event) = @_;
	$self->__showLoginPanel();
    $event->Skip;
	return;
    # wxGlade: MyFrame::do_login <event_handler>
    warn "Event handler (do_login) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class MyFrame

1;

