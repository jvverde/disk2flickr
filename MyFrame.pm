# generated by wxGlade 0.6.8 (standalone edition) on Mon Nov 04 11:47:25 2013
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;


sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    

    # Menu Bar

    $self->{mainMenu} = Wx::MenuBar->new();
    my $wxglade_tmp_menu;
    $self->{File} = Wx::Menu->new();
    $self->{Login} = $self->{File}->Append(wxID_ANY, "Login", "");
    $self->{Logout} = $self->{File}->Append(wxID_ANY, "Logout", "");
    $self->{File}->AppendSeparator();
    $self->{Exit} = $self->{File}->Append(wxID_ANY, "Exit", "");
    $self->{mainMenu}->Append($self->{File}, "File");
    $self->SetMenuBar($self->{mainMenu});
    
# Menu Bar end

    $self->{mainStatusBar} = $self->CreateStatusBar(2, 0);
    $self->{mainPanel} = Wx::ScrolledWindow->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    $self->{backupNotebook} = Wx::Notebook->new($self->{mainPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
    $self->{backupPanel} = Wx::Panel->new($self->{backupNotebook}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{backupSubPanel} = Wx::Panel->new($self->{backupPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{foldersListPanel} = Wx::ScrolledWindow->new($self->{backupSubPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    $self->{foldersList} = Wx::ListView->new($self->{foldersListPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_LIST|wxSUNKEN_BORDER);
    $self->{browseDirNameButton} = Wx::Button->new($self->{backupSubPanel}, wxID_ANY, "Add a new folder");
    $self->{RemoveButton} = Wx::Button->new($self->{backupSubPanel}, wxID_ANY, "Remove selected folders");
    $self->{clearAllButton} = Wx::Button->new($self->{backupSubPanel}, wxID_ANY, "Clear all");
    $self->{backupRecursiveOptionsPanel} = Wx::Panel->new($self->{backupSubPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{backupRecursiveOptionAll} = Wx::RadioButton->new($self->{backupRecursiveOptionsPanel}, wxID_ANY, "All", wxDefaultPosition, wxDefaultSize, wxRB_GROUP|wxRB_USE_CHECKBOX);
    $self->{backupRecursiveOptionSome} = Wx::RadioButton->new($self->{backupRecursiveOptionsPanel}, wxID_ANY, "Only if (sub)folder name ", wxDefaultPosition, wxDefaultSize, wxRB_USE_CHECKBOX);
    $self->{backupRecursiveOptionSomeChoiceName} = Wx::ComboBox->new($self->{backupRecursiveOptionsPanel}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, ["is equal to", "contains", "starts with", "ends with", "not equal to", "not contains", "not starts with", "not ends with"], wxCB_DROPDOWN|wxCB_DROPDOWN|wxCB_READONLY);
    $self->{backupRecursiveOptionSomeChoiceValue} = Wx::TextCtrl->new($self->{backupRecursiveOptionsPanel}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{backupRecursiveOptionsSizer_staticbox} = Wx::StaticBox->new($self->{backupRecursiveOptionsPanel}, wxID_ANY, "Filter (sub)folders" );
    $self->{backupSubSizer_staticbox} = Wx::StaticBox->new($self->{backupSubPanel}, wxID_ANY, "Select folders to backup" );
    $self->{start_button} = Wx::Button->new($self->{backupPanel}, wxID_ANY, "Start");
    $self->{Close_button} = Wx::Button->new($self->{backupPanel}, wxID_ANY, "Close");
    $self->{syncProgressPanel} = Wx::Panel->new($self->{backupPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{syncProgressBar} = Wx::Gauge->new($self->{syncProgressPanel}, wxID_ANY, 10, wxDefaultPosition,     wxDefaultSize, wxGA_HORIZONTAL|wxGA_SMOOTH);
    $self->{SyncProgressBarSizer_staticbox} = Wx::StaticBox->new($self->{syncProgressPanel}, wxID_ANY, "Synchronize progress" );
    $self->{uploadProgressPanel} = Wx::Panel->new($self->{backupPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{uploadProgressBar} = Wx::Gauge->new($self->{uploadProgressPanel}, wxID_ANY, 10, wxDefaultPosition,     wxDefaultSize, wxGA_HORIZONTAL);
    $self->{uploadProgressBarSizer_staticbox} = Wx::StaticBox->new($self->{uploadProgressPanel}, wxID_ANY, "Upload progress" );
    $self->{notebook_4_pane_2} = Wx::Panel->new($self->{backupNotebook}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{loginPanel} = Wx::ScrolledWindow->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    $self->{askAuthPanel} = Wx::Panel->new($self->{loginPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{askAuthInfoSubPanel} = Wx::ScrolledWindow->new($self->{askAuthPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxDOUBLE_BORDER|wxTAB_TRAVERSAL);
    $self->{cancelAuthButton} = Wx::Button->new($self->{askAuthPanel}, wxID_ANY, "Cancel");
    $self->{nextAuthButton} = Wx::Button->new($self->{askAuthPanel}, wxID_ANY, "Get Auth...");
    $self->{getTokenPanel} = Wx::Panel->new($self->{loginPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{getTokenInfoSubPanel} = Wx::Panel->new($self->{getTokenPanel}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxDOUBLE_BORDER|wxTAB_TRAVERSAL);
    $self->{getTokenInfoLabel} = Wx::StaticText->new($self->{getTokenInfoSubPanel}, wxID_ANY, "Check the autorization. \n(Don't if you haven't give autorization in the browser)", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    $self->{getTokenInfoSubHSizer_staticbox} = Wx::StaticBox->new($self->{getTokenInfoSubPanel}, wxID_ANY, "Step 2: Check" );
    $self->{cancelTokenButton} = Wx::Button->new($self->{getTokenPanel}, wxID_ANY, "Cancel");
    $self->{nextTokenButton} = Wx::Button->new($self->{getTokenPanel}, wxID_ANY, "Check...");

    $self->__set_properties();
    $self->__do_layout();

Wx::Event::EVT_MENU($self, $self->{Login}, \&do_login);
Wx::Event::EVT_MENU($self, $self->{Logout}, \&do_logout);
Wx::Event::EVT_MENU($self, $self->{Exit}, \&do_exit);
    Wx::Event::EVT_BUTTON($self, $self->{browseDirNameButton}->GetId, \&do_browse);
    Wx::Event::EVT_BUTTON($self, $self->{RemoveButton}->GetId, \&do_remove_selected);
    Wx::Event::EVT_BUTTON($self, $self->{clearAllButton}->GetId, \&do_remove_all);
    Wx::Event::EVT_RADIOBUTTON($self, $self->{backupRecursiveOptionAll}->GetId, \&do_matching_all);
    Wx::Event::EVT_RADIOBUTTON($self, $self->{backupRecursiveOptionSome}->GetId, \&do_matching_some);
    Wx::Event::EVT_COMBOBOX($self, $self->{backupRecursiveOptionSomeChoiceName}->GetId, \&do_matching_action);
    Wx::Event::EVT_TEXT_ENTER($self, $self->{backupRecursiveOptionSomeChoiceValue}->GetId, \&do_matching_text_enter);
    Wx::Event::EVT_TEXT($self, $self->{backupRecursiveOptionSomeChoiceValue}->GetId, \&do_matching_text_enter);
    Wx::Event::EVT_BUTTON($self, $self->{start_button}->GetId, \&do_backup);
    Wx::Event::EVT_BUTTON($self, $self->{Close_button}->GetId, \&do_close);
    Wx::Event::EVT_BUTTON($self, $self->{cancelAuthButton}->GetId, \&do_main);
    Wx::Event::EVT_BUTTON($self, $self->{nextAuthButton}->GetId, \&do_askAuth);
    Wx::Event::EVT_BUTTON($self, $self->{cancelTokenButton}->GetId, \&do_main);
    Wx::Event::EVT_BUTTON($self, $self->{nextTokenButton}->GetId, \&do_getToken);

    # end wxGlade
    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: MyFrame::__set_properties
    $self->SetTitle("Disk2Flickr");
    $self->SetSize(Wx::Size->new(550, 380));
    $self->{mainStatusBar}->SetStatusWidths(-1,0);
    
	my( @mainStatusBar_fields ) = (
		"User Status",
		""
	);

    if( @mainStatusBar_fields ) {
    	$self->{mainStatusBar}->SetStatusText($mainStatusBar_fields[$_], $_)     
		for 0 .. $#mainStatusBar_fields ;
	}
    $self->{foldersListPanel}->SetScrollRate(10, 10);
    $self->{backupRecursiveOptionSomeChoiceName}->SetSelection(-1);
    $self->{mainPanel}->SetScrollRate(10, 10);
    $self->{askAuthInfoSubPanel}->SetScrollRate(10, 10);
    $self->{loginPanel}->Show(0);
    $self->{loginPanel}->SetScrollRate(10, 10);
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: MyFrame::__do_layout
    $self->{mainSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{loginPanelSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{getTokenSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{getTokenControlSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{getTokenInfoSubHSizer_staticbox}->Lower();
    $self->{getTokenInfoSubHSizer} = Wx::StaticBoxSizer->new($self->{getTokenInfoSubHSizer_staticbox}, wxVERTICAL);
    $self->{getTokenInfoSubVSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{askAuthSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{askAuthControlSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{mainPainelSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{backupSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{uploadProgressBarSizer_staticbox}->Lower();
    $self->{uploadProgressBarSizer} = Wx::StaticBoxSizer->new($self->{uploadProgressBarSizer_staticbox}, wxVERTICAL);
    $self->{SyncProgressBarSizer_staticbox}->Lower();
    $self->{SyncProgressBarSizer} = Wx::StaticBoxSizer->new($self->{SyncProgressBarSizer_staticbox}, wxVERTICAL);
    $self->{mainControlHSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{mainControlVSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{backupSubSizer_staticbox}->Lower();
    $self->{backupSubSizer} = Wx::StaticBoxSizer->new($self->{backupSubSizer_staticbox}, wxVERTICAL);
    $self->{backupRecursiveOptionsSizer_staticbox}->Lower();
    $self->{backupRecursiveOptionsSizer} = Wx::StaticBoxSizer->new($self->{backupRecursiveOptionsSizer_staticbox}, wxVERTICAL);
    $self->{backupRecursiveOptionSomeSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{foldersControlSizer} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{foldersListSizer} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{foldersListSizer}->Add($self->{foldersList}, 1, wxEXPAND, 0);
    $self->{foldersListPanel}->SetSizer($self->{foldersListSizer});
    $self->{backupSubSizer}->Add($self->{foldersListPanel}, 1, wxEXPAND, 0);
    $self->{foldersControlSizer}->Add($self->{browseDirNameButton}, 0, 0, 0);
    $self->{foldersControlSizer}->Add($self->{RemoveButton}, 0, 0, 0);
    $self->{foldersControlSizer}->Add($self->{clearAllButton}, 0, 0, 0);
    $self->{backupSubSizer}->Add($self->{foldersControlSizer}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{backupRecursiveOptionsSizer}->Add($self->{backupRecursiveOptionAll}, 0, 0, 0);
    $self->{backupRecursiveOptionSomeSizer}->Add($self->{backupRecursiveOptionSome}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{backupRecursiveOptionSomeSizer}->Add($self->{backupRecursiveOptionSomeChoiceName}, 0, 0, 0);
    $self->{backupRecursiveOptionSomeSizer}->Add($self->{backupRecursiveOptionSomeChoiceValue}, 0, 0, 0);
    $self->{backupRecursiveOptionsSizer}->Add($self->{backupRecursiveOptionSomeSizer}, 1, wxEXPAND, 0);
    $self->{backupRecursiveOptionsPanel}->SetSizer($self->{backupRecursiveOptionsSizer});
    $self->{backupSubSizer}->Add($self->{backupRecursiveOptionsPanel}, 0, wxTOP|wxEXPAND, 2);
    $self->{backupSubPanel}->SetSizer($self->{backupSubSizer});
    $self->{backupSizer}->Add($self->{backupSubPanel}, 1, wxEXPAND, 0);
    $self->{mainControlVSizer}->Add($self->{start_button}, 0, 0, 0);
    $self->{mainControlVSizer}->Add(20, 1, 0, 0, 0);
    $self->{mainControlVSizer}->Add($self->{Close_button}, 0, 0, 0);
    $self->{mainControlHSizer}->Add($self->{mainControlVSizer}, 0, wxTOP|wxALIGN_CENTER_HORIZONTAL, 10);
    $self->{backupSizer}->Add($self->{mainControlHSizer}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{SyncProgressBarSizer}->Add($self->{syncProgressBar}, 0, wxEXPAND, 0);
    $self->{syncProgressPanel}->SetSizer($self->{SyncProgressBarSizer});
    $self->{backupSizer}->Add($self->{syncProgressPanel}, 0, wxEXPAND, 0);
    $self->{uploadProgressBarSizer}->Add($self->{uploadProgressBar}, 0, wxEXPAND, 0);
    $self->{uploadProgressPanel}->SetSizer($self->{uploadProgressBarSizer});
    $self->{backupSizer}->Add($self->{uploadProgressPanel}, 0, wxEXPAND, 0);
    $self->{backupPanel}->SetSizer($self->{backupSizer});
    $self->{backupNotebook}->AddPage($self->{backupPanel}, "Backup");
    $self->{backupNotebook}->AddPage($self->{notebook_4_pane_2}, "Help");
    $self->{mainPainelSizer}->Add($self->{backupNotebook}, 1, wxEXPAND, 0);
    $self->{mainPanel}->SetSizer($self->{mainPainelSizer});
    $self->{mainSizer}->Add($self->{mainPanel}, 1, wxEXPAND, 0);
    $self->{askAuthSizer}->Add($self->{askAuthInfoSubPanel}, 5, wxEXPAND, 0);
    $self->{askAuthControlSizer}->Add($self->{cancelAuthButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{askAuthControlSizer}->Add(20, 1, 0, 0, 0);
    $self->{askAuthControlSizer}->Add($self->{nextAuthButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{askAuthSizer}->Add($self->{askAuthControlSizer}, 1, wxTOP|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{askAuthPanel}->SetSizer($self->{askAuthSizer});
    $self->{loginPanelSizer}->Add($self->{askAuthPanel}, 1, wxEXPAND, 0);
    $self->{getTokenInfoSubVSizer}->Add($self->{getTokenInfoLabel}, 0, wxALL|wxALIGN_CENTER_VERTICAL, 2);
    $self->{getTokenInfoSubHSizer}->Add($self->{getTokenInfoSubVSizer}, 1, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{getTokenInfoSubPanel}->SetSizer($self->{getTokenInfoSubHSizer});
    $self->{getTokenSizer}->Add($self->{getTokenInfoSubPanel}, 5, wxEXPAND, 0);
    $self->{getTokenControlSizer}->Add($self->{cancelTokenButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{getTokenControlSizer}->Add(20, 1, 0, 0, 0);
    $self->{getTokenControlSizer}->Add($self->{nextTokenButton}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{getTokenSizer}->Add($self->{getTokenControlSizer}, 1, wxTOP|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{getTokenPanel}->SetSizer($self->{getTokenSizer});
    $self->{loginPanelSizer}->Add($self->{getTokenPanel}, 1, wxEXPAND, 0);
    $self->{loginPanel}->SetSizer($self->{loginPanelSizer});
    $self->{mainSizer}->Add($self->{loginPanel}, 2, wxEXPAND, 0);
    $self->SetSizer($self->{mainSizer});
    $self->Layout();
    # end wxGlade
}

sub do_login {
    my ($self, $event) = @_;
	$self->go_login;
	return $event->Skip;
    # wxGlade: MyFrame::do_login <event_handler>
    warn "Event handler (do_login) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_logout {
    my ($self, $event) = @_;
	$self->go_logout;
	return $event->Skip;
    # wxGlade: MyFrame::do_logout <event_handler>
    warn "Event handler (do_logout) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_exit {
    my ($self, $event) = @_;
	$self->go_exit;
	return $event->Skip;
    # wxGlade: MyFrame::do_exit <event_handler>
    warn "Event handler (do_exit) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_browse {
    my ($self, $event) = @_;
	$self->go_browse;
	return $event->Skip;
    # wxGlade: MyFrame::do_browse <event_handler>
    warn "Event handler (do_browse) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_remove_selected {
    my ($self, $event) = @_;
	$self->go_remove_selected;
	return $event->Skip;
    # wxGlade: MyFrame::do_remove_selected <event_handler>
    warn "Event handler (do_remove_selected) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_remove_all {
    my ($self, $event) = @_;
	$self->go_remove_all;
	return $event->Skip;
    # wxGlade: MyFrame::do_remove_all <event_handler>
    warn "Event handler (do_remove_all) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_backup {
    my ($self, $event) = @_;
	$self->go_backup;
	return $event->Skip;
    # wxGlade: MyFrame::do_backup <event_handler>
    warn "Event handler (do_backup) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_close {
    my ($self, $event) = @_;
	$self->go_close;
	return $event->Skip;
    # wxGlade: MyFrame::do_close <event_handler>
    warn "Event handler (do_close) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_main {
    my ($self, $event) = @_;
	$self->go_main;
	return $event->Skip;
    # wxGlade: MyFrame::do_main <event_handler>
    warn "Event handler (do_main) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_askAuth {
    my ($self, $event) = @_;
	$self->go_askAuth;
	return $event->Skip;
    # wxGlade: MyFrame::do_askAuth <event_handler>
    warn "Event handler (do_askAuth) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_getToken {
    my ($self, $event) = @_;
	$self->go_getToken;
	return $event->Skip;
    # wxGlade: MyFrame::do_getToken <event_handler>
    warn "Event handler (do_getToken) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_matching_all {
    my ($self, $event) = @_;
	$self->go_matching_all;
	return $event->Skip;
    # wxGlade: MyFrame::do_matching_all <event_handler>
    warn "Event handler (do_matching_all) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_matching_some {
    my ($self, $event) = @_;
	$self->go_matching_some;
	return $event->Skip;
    # wxGlade: MyFrame::do_matching_some <event_handler>
    warn "Event handler (do_matching_some) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_matching_action {
    my ($self, $event) = @_;
	$self->go_matching_action;
	return $event->Skip;
    # wxGlade: MyFrame::do_matching_action <event_handler>
    warn "Event handler (do_matching_action) not implemented";
    $event->Skip;
    # end wxGlade
}


sub do_matching_text_enter {
    my ($self, $event) = @_;
	$self->go_matching_text_enter;
	return $event->Skip;
    # wxGlade: MyFrame::do_matching_text_enter <event_handler>
    warn "Event handler (do_matching_text_enter) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class MyFrame

1;

